package day06;

import java.util.Scanner;

public class MethodExample {

	public static void main(String[] args) {
		// return 
		// - return문은 메서드 실행을 끝내고 결과 값을 호출된 부분에 반환하는 문장
		// - return문만 단독으로 사용했을 땐 호출된 곳으로 제어만 넘어감. 원래는 return + value(반환값)인데 단독으로 쓰이면 그렇다는 뜻.
		// runtime이 걸린 동안, 함수가 호출한 쪽으로 넘어가서 진행
		// 하지만 return 뒤에 연산식과 함께 사용되면 식의 결과 값과 제어가 함께 넘어감.
		
		// 메서드(Method)
		// - 메서드는 반복되는 코드 블럭에 이름을 붙여놓은 것을 말함. 
		// - 옛날에는 해야하는 동작이 있을 때 마다 반복 움직임, 동작이라도 계속 늘여 써야했다. 어셈블리(기계어)는 순서대로 쭉 쓰는 것..
		// - 메서드는 반복되는 코드를 줄여주고, 좀 더 구조화된 코드를 만들어서 우리가 코드를 알아보기 쉽게한다.
		// - 객체 지향 프로그래밍에서 메서드는 "객체가 가져야할 기능을 구현하기 위해서 만든다."라고 표현함.
		// - 메서드 이름 뒤에는 반드시 "()"(소괄호)가 따른다.
		// - 매개변수가 없으면, 값이 들어와도 아무 일도 수행하지 않는다.
		
		/*
		 * 	메서드 형식(선언 방법)
		 * 	(<접근제한자> <타입> 앞의 둘은 꼭 있어야한건 아니다.) <반환 유형> <메서드 식별자 - 이름>(매개변수=parameter) {
		 * 			기능 상세;
		 *  }
		 *  
		 *  메서드 구분, 매개변수
		 *  -유형1: 매개변수가 있고, 반환 값이 있는 경우! 전달인자(O), 반환값(O)
		 *  -유형2: 매개변수가 있고, 반환 값이 없는 경우! 전달인자(O), 반환 값(X)
		 *  -유형3: 매개변수가 없고, 반환 값이 있는 경우! 전달인자(X), 반환 값(O)
		 *  -유형4: 매개변수가 없고, 반환 값이 없는 경우! 전달인자(X), 반환 값(X)
		 *  
		 *  매개변수(parameter)
		 *	- 매서드가 실행될 때에 필요한 데이터를 외부로부터 받기 위해서 사용함.
		 *	- 변수의 일종으로 데이터 타입과 함께 선언해서 사용해야하고, 초기화는 하지 않음. 함수의 초기값은 인자값이다?
		 *  - 여러개 선언 가능하고, 메서드가 외부로 받을 데이터가 없다면 선언하지 않아도 된다.
		 *    그리고, 매개 변수가 없다면 반환 유형처럼 void를 쓰지 않고, 소괄호를 비워둬야 함.
		 *    
		 *  반환 유형(return type)
		 *  - 반환 유형은 메서드가 실행한 후에 메서드를 호출한 곳에 반환하는 값을 전달하는 데이터 타입.
		 *  - 메서드는 반환값이 있을 수도 있고, 없을 수도 있는데, 없는 경우에는 반환 유형에 "void"를 사용.
		 *  - 반환 값이 있는 메서드를 호출할 땐 해당 반환 유형에 맞는 변수에 반환 값을 저장해야함.
		 *  - 메서드 실행의 결과값을 반환할 때 "return" 키워드를 사용한다.
		 *  
		 */
		
		//메인에서 아래의 메서드 호출
		
		print();
		int num1 = input();
		int num2 = input();
		
		int result = add(num1, num2);
		showResult(result);
			
	}
	
	static void print() { //반환값이 없는 경우, 매개변수도 없는 경우
		System.out.println("정수 두개 입력하세요!");
	}
		
	static int input() { //반환 값이 있는 경우, 매개변수는 없는 경우
		Scanner scan = new Scanner(System.in);
		System.out.print("정수 입력> ");
		int num = scan.nextInt();
		
		return num;
	}
		
	static int add(int num1, int num2) { //반환값이 있는 경우, 매개변수도 있는 경우
		int result = num1 + num2;
		return result;
	}
		
	static void showResult(int result) { //반환값이 없는 경우, 매개변수는 있는 경우
		System.out.println("덧셈 결과 " + result);
	}
		
		
	

}
