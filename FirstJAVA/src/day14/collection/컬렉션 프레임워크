# Collection Framework
- 컬렉션은 배열과 유사하지만, 데이터 저장/조회/수정/삭제하는 작업을 쉽게 처리할 수 있고,
	동적인 크기를 가지고 있다는 장점이 있다.
- 컬렉션 계열: Set/List/Map 인터페이스
	, 이를 구현한 클래스를 이용하면 객체들을 모음 저장할 수 있음.	

Collection 인터페이스의 하위 클래스
 > Set계열
 	- Set 인터페이스를 구현한 클래스들: HashSet, LinkedHashSet, TreeSet
 	- 순서 X, 중복 허용 X. 들어간 이후로도 인덱스로 [i]형식으로 뽑아 쓸 수 없다.
 > List계열
 	- List 인터페이스를 구현한 클래스들: ArrayList, LinkedList, Queue, Stack(Vector)
 	- 순서 O, 중복 허용 O
 > Map 계열
 	- Map 인터페이스를 구현한 클래스들: HashMap, TreeMap
 	- key값은 중복 X, value값은 중복 O
 
  - 객체를 저장할 수 있는 자료구조들을 제공
  - 컬렉션에 저장된 객체(or 변수)들은 element라고 한다.
  - 배열과 달리 동적인 공간을 갖는다.(힙에 공간을 따로 따로 가져가서 이어준다는 의미)
  - 컬렉션마다 관리할 수 있는 메서드가 존재
  - 기존 배열에 비해 높은 성능을 보장하고 있다.
  
# Collection 인터페이스의 주요 메서드
 - 리턴타입			메서드           			E는 기본, 객체의 자료형, e는 객체 변수명
   boolean			add(E e)		   	컬렉션에 element를 추가(추가가 되면 true, 안되면 false)
   void				clear()				컬렉션의 모든 element를 삭제
   boolean			contains(Object o)	컬렉션이 주어진 객체를 포함하면 true를 리턴
   boolean			isEmpty()			컬렉션이 비어있으면 true, 아니면 false 리턴
   Iterator<E>		iterator()			해당 컬렉션의 iterator 객체를 반환
   boolean			remove(Object o)	주어진 element객체를 제거
   int				size()				컬렉션의 엘리먼트 개수를 밴환
   Object[]			toArray()			이 컬렉션의 모든 elements를 배열로 반환
   <T> t[]			toArray(T[] a) 		이 컬렉션의 모든 elements를 주어진 타입의 배열로 반환
   
-----------------------------------------------------------------------------------
# List 계열(순서O, 중복O)
 - 객체를 인덱스로 관리하기 때문에 객체를 저장하면 자동으로 인덱스 번호가 부여되고, 인덱스를 통해서 객체를 검색, 삭제할 수 있는 기능을 제공하고 있음
 - 객체를 입력된 순서대로 저장하며, 동일한 객체를 중복 저장할 수 있다.
 
 	# 주요 메서드
 	 - 객체 추가 기능
 	 1. add(E e): 주어진 객체를 List의 맨 끝에 추가
 	 2. add(int index, E e): 주어진 index에 객체를 추가(변경이 아니고 추가)
 	 3. set(int index, E e): 주어진 index에 저장된 객체를 주어진 객체로 변경
 	 
 	 - 객체 검색 기능
 	 1. contains(Object o): 주어진 객체가 저장되어 있는지 여부를 판단(true/false)
 	 2. get(int index): 주어진 index에 저장되어 있는 객체를 리턴
 	 3. isEmpty(): 컬렉션이 비어있는지 여부를 판단(true/false)
 	 4. size(): 저장되어 있는 전체 객체 수를 리턴
 	 5. indexOf(Object o): 리스트에 주어진 객체의 위치를 반환, 찾지 못했다면 -1 반환
 	 
 	 - 객체 삭제 기능
 	 1. clear(): 저장된 모든 객체를 삭제
 	 2. remove(int index): 주어진 index에 저장된 객체를 삭제
 	 3. remove(Object o): 주어진 객체를 삭제
 	 
 # Stack
  - Stack은 List컬렉션 클래스의 Vector 클래스를 상속받아 구현되어 있습니다.
  - 선입후출(영어로는 후입선출인데 저렇게 부른다고함)(LIFO)의 형태를 구현하여 가장 나중에 저장된 데이터가 가장 먼저 나온다.
  
  	# 메서드
  	 - 	return type		Method
  	 	boolean			empty(): 스택이 비어있는지 확인(비었으면 true, 아니면 false)
  	 	E				peek() : 스택 제일 상단의 요소를 반환
 		E				pop()  : 스택 제일 상단의 요소를 반환하며 삭제
 		E				push() : 스택 제일 상단에 매개변수로 들어온 데이터를 저장한다.
 		int				search(Object o) : 스택에 전달 객체 존재 확인, 인덱스 반환, 인덱스는 제일 상단위치에서 1부터 시작하여 반환.
 ----------------------------------------------------------------------------------
 # Queue
  - Queue는 스택과 달리 인터페이스 형태로만 구현되어 있음.
  		그래서 Queue는 직간접적으로 구현한 클래스가 상당히 많고, LinkedList클래스가 있다.
  - Queue 메모리 구조는 스택과 반대로 선입선출(FIFO)의 구조를 가지게 된다.
  	
  	# 메서드
  	 - return type		Method
  	   boolean			add(E e)  : 해당 큐의 맨 뒤(가장 늦게 저장된)에 전달된 매개변수를 삽입 
  	   								삽입되면 true, 공간이 없어 안되면 false, IllegalStateException이 발생
  	   E				element() : 해당 큐의 맨 앞에 있는 요소(가장 먼저 저장된)를 반환
 	   E				offer(E e): 해당 큐의 맨 뒤에 전달된 매개 변수를 삽입(add랑 동일)
 	   E				peek()	  : 해당 큐의 맨 앞에 있는 요소를 반환(비어있으면 null반환)
 	   E				poll()	  : 해당 큐의 맨 앞에 있는 요소를 반환하고 제거(비어있으면 null반환)
 	   int				remove()  : 해당 큐의 맨 앞에 있는 요소를 제거
 -----------------------------------------------------------------------------------
 # Set
  - 저장 순서를 보장하지 않고, 중복 저장을 할 수 없다.
  - 인덱스로 관리하지 않아서, 들어가는 순서와 나올 때의 순서가 다를 수 있음.
  -	인덱스로 객체 검색기능 없고, 전체 객체를 대상 한 번씩 반복해서 객체의 값을 가져오는 Iterator(반복자)를 제공
  	
  	# 주요메서드
  	 - 객체 추가
  	  1. add(E e): 주어진 객체를 저장, 성공했을 때 true, 중복 객체를 저장하면 false 리턴
  	  
  	  
  	 - 객체 검색
  	  1. contains(Object o): 주어진 객체가 저장되어 있는지 여부를 판단
  	  2. isEmpty(): 컬렉션이 비어있는지 조사
  	  3. iterator(): 저장된 객체를 한 번씩 가져오는 반복자 객체를 리턴
  	  4. size(): 저장되어 있는 전체 객체 수를 리턴
  	 
  	 - 객체 삭제
  	  1. clear(): 저장된 모든 객체를 삭제
  	  2. remove(Object o): 주어진 객체를 삭제
  	    	
 	# Iterator 인터페이스의 주요 메서드
 	 1. hasNext(): 가져올 객체가 있으면 true, 없으면 false 리턴
 	 2. next(): 컬렉션에서 하나의 객체를 가져옴
 	 3. remove(): Set 컬렉션에서 객체를 제거
 	 
  -----------------------------------------------------------------------------------
# 트리구조(tree, 나무구조)
- 그래프의 일종
- 여러노드가 한 노드를 가리킬 수 없는 구조
- 간단하게 회로가 없고, 서로 다른 두 노드를 잇는 길이 하나뿐인 그래프
 
- 트리에는 최상위 노드를 루트 노드(root node 뿌리 노드)
- 노드 A가 노드 B를 가리킬 때 A를 B의 부모 노드(parent node), 
	B를 A의 자식 노드(child node)
- 자식 노드가 없는 노드를 리프 노드(leaf node)라 부름.
- 잎 노드가 아닌 노드를 내부 노드(internal node)
 -----------------------------------------------------------------------------------
# Map 컬렉션
  - Map 컬렉션은 key와 value로 구성된 Entry 객체를 저장하는 구조
  - key는 중복 불가, value는 중복 가능
  
	# 주요 메서드
	 - 객체 추가
	 1. put(K key, V value): 주어진 키와 값을 추가, 정상저장되면 그 value를 리턴
	 
	 
	 - 객체 검색
	 1. containsKey(Object key): 주어진 키가 있는지 여부 확인
	 2. containsValue(Object value): 주어진 값이 있는지 여부 확인
	 3. get(Object key): 주어진 키에 들어있는 값을 리턴
	 4. isEmpty(): 컬렉션이 비어있는지 여부 확인	 
	 5. size(): 저장된 키의 총 수를 리턴
	 6. values(): 저장된 모든 값을 컬렉션에 담아서 리턴 - List에 담아서(중복 가부로 결정된 것)
	 7. keySet(): 저장된 모든 키를 Set객체에 담아서 리턴 - Set에 담아서(중복 가부로 결정된 것)
	 8. entrySet(): 키와 값의 쌍으로 구성된 모든 Entry 객체를 Set에 담아 리턴
	 				반환 타입 형태: Set<Map.Entry<K,V>>
	 
	 - 객체 삭제
	 1. clear(): 모든 Entry를 삭제
	 2. remove(Object key): 주어진 키와 일치하는 Entry객체를 삭제
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 